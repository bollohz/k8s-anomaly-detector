apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "k8s-anomaly-detector.fullname" .}}-post-start-job
  labels:
    {{- include "k8s-anomaly-detector.labels" . | nindent 4 }}
    app.kubernetes.io/name: {{ template "k8s-anomaly-detector.fullname" . }}-post-start-job
spec:
  template:
    metadata:
      labels:
        app: {{ template "k8s-anomaly-detector.fullname" .}}-post-start-job
        release: {{ .Release.Name }}
        app.kubernetes.io/name: {{ template "k8s-anomaly-detector.fullname" .}}-post-start-job
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name  }}
      restartPolicy: OnFailure
      volumes:
        - name: {{ template "k8s-anomaly-detector.name" . }}
          configMap:
            name: {{ template "k8s-anomaly-detector.name" . }}
      containers:
        - name:  {{ template "k8s-anomaly-detector.fullname" . }}-post-start-job
          image: "{{ .Values.retrain.image }}:{{ .Values.retrain.imageTag }}"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              python retrain.py
          env:
            {{ range $key, $value := .Values.deployment.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{ end }}
          volumeMounts:
            {{ $configName := (include "k8s-anomaly-detector.name" .)}}
            {{ range .Values.volumeMounts}}
            - mountPath: {{ .path }}
              subPath: {{ .file }}
              name: {{ $configName }}
          {{ end }}
          resources:
            limits:
              cpu: "{{ .Values.retrain.resources.cpuLimit }}"
              memory: "{{ .Values.retrain.resources.ramMbLimits }}Mi"
            requests:
              cpu: "{{ .Values.retrain.resources.cpuRequest }}"
              memory: "{{ .Values.retrain.resources.ramMbRequests }}Mi"
    
